"""Игра угадай число
Компьютер сам загадывает и сам угадывает число
"""

import numpy as np

    
def random_predict(number: int = 1) -> int:
    """Угадываем рандомные числа на основе алгоритм бинарного поиска 
       - применяем итерационный метод. Тело цикла повторяеться пока не
       будет найден элемент, либо если его нет в массиве с помощью 
       которого ищем, возврашает None

    Args:
        number (int, optional): Загаданное число. Defaults to 1.

    Returns:
        int: Число попыток
    """
    
    # Инициализируем список последовательных чисел от 1 до 100, для 
    # угадывания случайных чисел на основе бинарного поиска
    predict_list = list(range(1, 101))
    # Начало границы поиска
    left = 0
    # Конец границы поиска (т.к.) нам в дальнейшем нужен индекс числа 
    # в списке, то мы отнимаем единицу, т.к. начало индекса 0 
    right = len(predict_list) - 1
    # Счетчик попыток
    count = 0
    # Ставим условие, что пока существует данный интервал цикл 
    # работает 
    while left <= right:
        # Добавляем попытку в счетчик
        count += 1
        # Вычисляем индекс середину массива данных predict_list 
        mid = (left + right) // 2
        # Инициализируем переменную для найденной середины массива
        predict = predict_list[mid]
        # Ставим условие, искомый элемент найден - возвращаем счетчик 
        # попыток
        if predict == number:
            return count
        # Искомый элемент меньше нашей переменной
        elif predict > number:
            # Ограничиваем поиск левой стороной массива данных
            right = mid - 1
        # Искомый элемент больше нашей перменной
        else:
            # Ограничваем поиск правой стороной массива данных
            left = mid + 1
    # Если текущего элемента (number) не существует в нашем списке 
    # (predict_list), не для нашего случая
    return None

def score_game(random_predict) -> int:
    """Функция реализует подсчет среднего количества попыток поиска 
    случайнного числа из списка 1000 чисел. Здесь передаем "вычисляющую" 
    функцию random_predict в параметре.

    Args:
        random_predict ([type]): функция угадывания

    Returns:
        int: среднее количество попыток
    """
    # Cписок для хранения счетчика попыток угадывания каждого числа
    count_ls = []
    # Фиксируем RANDOM SEED, чтобы эксперимент был воспроизводим
    np.random.seed(1)  
    # Инициализируем массив 1000 случайных чисел от 1 до 100 
    random_array = np.random.randint(1, 101, size=1000)
    # Цикл последовательно считывает полученные числа из массива данных
    for number in random_array:
        # Добавляем в список счетчиков, число количества попыток, 
        # который вернула применненая фун-я 
        count_ls.append(random_predict(number))
    # Вычисляем среднее значение всех эл. списка count_ls и преобразуем 
    score = int(np.mean(count_ls))
    print(f"Ваш алгоритм угадывает число в среднем за {score} попыток")
    return score


if __name__ == "__main__":
    # RUN
    score_game(random_predict)


